{"ast":null,"code":"// src/api.js\n\nimport axios from 'axios';\nconst getCSRFToken = () => {\n  const cookies = document.cookie.split(';');\n  for (let cookie of cookies) {\n    const [key, value] = cookie.trim().split('=');\n    if (key === 'csrftoken') return value;\n  }\n  return null;\n};\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api/',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`; // 인증 헤더 추가\n  }\n  const csrfToken = getCSRFToken();\n  if (csrfToken) {\n    config.headers['X-CSRFToken'] = csrfToken; // CSRF 토큰 추가\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 회원가입 요청\nexport const handleSignup = async (username, password, name) => {\n  try {\n    const response = await api.post('accounts/register/', {\n      username,\n      password,\n      name\n    });\n    console.log('회원가입 성공:', response.data);\n    return response;\n  } catch (error) {\n    console.error('회원가입 실패:', error.response.data);\n    throw error;\n  }\n};\n\n// 로그인 요청 (토큰 발급)\nexport const handleLogin = async (username, password) => {\n  try {\n    const response = await api.post('accounts/login/', {\n      username,\n      password\n    });\n    const {\n      access,\n      refresh,\n      name\n    } = response.data;\n\n    // 토큰 저장 (로컬스토리지)\n    localStorage.setItem('access_token', access);\n    localStorage.setItem('refresh_token', refresh);\n    localStorage.setItem('user_name', name);\n    console.log('로그인 성공:', response.data);\n    return response;\n  } catch (error) {\n    console.error('로그인 실패:', error.response.data);\n    throw error;\n  }\n};\nexport const fetchProtectedData = async () => {\n  const token = localStorage.getItem('access_token');\n  try {\n    const response = await api.get('protected-endpoint/', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('보호된 데이터:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('데이터 불러오기 실패:', error.response.data);\n  }\n};","map":{"version":3,"names":["axios","getCSRFToken","cookies","document","cookie","split","key","value","trim","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","csrfToken","error","Promise","reject","handleSignup","username","password","name","response","post","console","log","data","handleLogin","access","refresh","setItem","fetchProtectedData","get"],"sources":["C:/Users/User/Videos/react/my-app/frontend/src/api.js"],"sourcesContent":["// src/api.js\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nconst getCSRFToken = () => {\r\n  const cookies = document.cookie.split(';');\r\n  for (let cookie of cookies) {\r\n      const [key, value] = cookie.trim().split('=');\r\n      if (key === 'csrftoken') return value;\r\n  }\r\n  return null;\r\n};\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api/',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, \r\n});\r\n\r\napi.interceptors.request.use(\r\n  (config) => {\r\n      const token = localStorage.getItem('access_token');\r\n      if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`; // 인증 헤더 추가\r\n      }\r\n      const csrfToken = getCSRFToken();\r\n      if (csrfToken) {\r\n          config.headers['X-CSRFToken'] = csrfToken; // CSRF 토큰 추가\r\n      }\r\n      return config;\r\n  },\r\n  (error) => {\r\n      return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 회원가입 요청\r\nexport const handleSignup = async (username, password,name) => {\r\n  try {\r\n    const response = await api.post('accounts/register/', { username, password,name });\r\n    console.log('회원가입 성공:', response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('회원가입 실패:', error.response.data);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 로그인 요청 (토큰 발급)\r\nexport const handleLogin = async (username, password) => {\r\n  try {\r\n    const response = await api.post('accounts/login/', { username, password });\r\n    const { access, refresh,name } = response.data;\r\n\r\n    // 토큰 저장 (로컬스토리지)\r\n    localStorage.setItem('access_token', access);\r\n    localStorage.setItem('refresh_token', refresh);\r\n    localStorage.setItem('user_name', name);\r\n\r\n    console.log('로그인 성공:', response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('로그인 실패:', error.response.data);\r\n    throw error; \r\n  }\r\n};\r\n\r\nexport const fetchProtectedData = async () => {\r\n  const token = localStorage.getItem('access_token');\r\n\r\n  try {\r\n    const response = await api.get('protected-endpoint/', {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    console.log('보호된 데이터:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('데이터 불러오기 실패:', error.response.data);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}