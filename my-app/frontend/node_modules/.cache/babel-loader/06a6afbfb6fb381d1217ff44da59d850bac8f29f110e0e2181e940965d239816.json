{"ast":null,"code":"// src/api.js\n\nimport axios from 'axios';\nconst getCSRFToken = () => {\n  const cookies = document.cookie.split(';');\n  for (let cookie of cookies) {\n    const [key, value] = cookie.trim().split('=');\n    if (key === 'csrftoken') return value;\n  }\n  return null;\n};\n\n// Axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api/accounts/',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // 쿠키 전달\n});\n\n// 요청 인터셉터: Authorization 헤더 추가 및 CSRF 토큰 설정\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  const csrfToken = getCSRFToken();\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  if (csrfToken) {\n    config.headers['X-CSRFToken'] = csrfToken;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 응답 인터셉터: 토큰 갱신 및 401 처리\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (refreshToken) {\n      try {\n        // 토큰 갱신 요청\n        const refreshResponse = await axios.post('http://localhost:8000/api/token/refresh/', {\n          refresh: refreshToken\n        });\n        localStorage.setItem('access_token', refreshResponse.data.access);\n\n        // 이전 요청 재시도\n        error.config.headers['Authorization'] = `Bearer ${refreshResponse.data.access}`;\n        return axios(error.config);\n      } catch (refreshError) {\n        console.error('토큰 갱신 실패:', refreshError);\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        localStorage.removeItem('user_name');\n        alert('세션이 만료되었습니다. 다시 로그인하세요.');\n      }\n    } else {\n      alert('세션이 만료되었습니다. 다시 로그인하세요.');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// 회원가입 요청\nexport const handleSignup = async (username, password, name) => {\n  try {\n    const response = await api.post('register/', {\n      username,\n      password,\n      name\n    });\n    console.log('회원가입 성공:', response.data);\n    return response;\n  } catch (error) {\n    var _error$response2;\n    console.error('회원가입 실패:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};\n\n// 로그인 요청 (토큰 발급)\nexport const handleLogin = async (username, password) => {\n  try {\n    const response = await api.post('login/', {\n      username,\n      password\n    });\n    const {\n      access,\n      refresh,\n      name\n    } = response.data;\n\n    // 토큰 및 사용자 정보 저장\n    localStorage.setItem('access_token', access);\n    localStorage.setItem('refresh_token', refresh);\n    localStorage.setItem('user_name', name);\n    console.log('로그인 성공:', response.data);\n    return response;\n  } catch (error) {\n    var _error$response3;\n    console.error('로그인 실패:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw error;\n  }\n};\n\n// 보호된 데이터 가져오기\nexport const fetchProtectedData = async () => {\n  try {\n    const response = await api.get('protected-endpoint/');\n    console.log('보호된 데이터:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    console.error('데이터 불러오기 실패:', ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","getCSRFToken","cookies","document","cookie","split","key","value","trim","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","csrfToken","error","Promise","reject","response","_error$response","status","refreshToken","refreshResponse","post","refresh","setItem","data","access","refreshError","console","removeItem","alert","window","location","href","handleSignup","username","password","name","log","_error$response2","message","handleLogin","_error$response3","fetchProtectedData","get","_error$response4"],"sources":["C:/Users/User/Videos/react/my-app/frontend/src/api.js"],"sourcesContent":["// src/api.js\r\n\r\nimport axios from 'axios';\r\n\r\nconst getCSRFToken = () => {\r\n  const cookies = document.cookie.split(';');\r\n  for (let cookie of cookies) {\r\n    const [key, value] = cookie.trim().split('=');\r\n    if (key === 'csrftoken') return value;\r\n  }\r\n  return null;\r\n};\r\n\r\n// Axios 인스턴스 생성\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api/accounts/',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, // 쿠키 전달\r\n});\r\n\r\n// 요청 인터셉터: Authorization 헤더 추가 및 CSRF 토큰 설정\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('access_token');\r\n  const csrfToken = getCSRFToken();\r\n  if (token) {\r\n    config.headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n \r\n  if (csrfToken) {\r\n    config.headers['X-CSRFToken'] = csrfToken;\r\n  }\r\n  return config;\r\n}, (error) => Promise.reject(error));\r\n\r\n// 응답 인터셉터: 토큰 갱신 및 401 처리\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    if (error.response?.status === 401) {\r\n      const refreshToken = localStorage.getItem('refresh_token');\r\n      if (refreshToken) {\r\n        try {\r\n          // 토큰 갱신 요청\r\n          const refreshResponse = await axios.post('http://localhost:8000/api/token/refresh/', {\r\n            refresh: refreshToken,\r\n          });\r\n          \r\n          localStorage.setItem('access_token',refreshResponse.data.access);\r\n\r\n          // 이전 요청 재시도\r\n          error.config.headers['Authorization'] = `Bearer ${refreshResponse.data.access}`;\r\n          return axios(error.config);\r\n        } catch (refreshError) {\r\n          console.error('토큰 갱신 실패:', refreshError);\r\n          localStorage.removeItem('access_token');\r\n          localStorage.removeItem('refresh_token');\r\n          localStorage.removeItem('user_name');\r\n          alert('세션이 만료되었습니다. 다시 로그인하세요.');\r\n          \r\n        }\r\n      }\r\n\r\n      else {\r\n        alert('세션이 만료되었습니다. 다시 로그인하세요.');\r\n        window.location.href = '/login';\r\n    }\r\n      }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 회원가입 요청\r\nexport const handleSignup = async (username, password, name) => {\r\n  try {\r\n    const response = await api.post('register/', { username, password, name });\r\n    console.log('회원가입 성공:', response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('회원가입 실패:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 로그인 요청 (토큰 발급)\r\nexport const handleLogin = async (username, password) => {\r\n  try {\r\n    const response = await api.post('login/', { username, password });\r\n    const { access, refresh, name } = response.data;\r\n\r\n    // 토큰 및 사용자 정보 저장\r\n    localStorage.setItem('access_token', access);\r\n    localStorage.setItem('refresh_token', refresh);\r\n    localStorage.setItem('user_name', name);\r\n\r\n    console.log('로그인 성공:', response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('로그인 실패:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 보호된 데이터 가져오기\r\nexport const fetchProtectedData = async () => {\r\n  try {\r\n    const response = await api.get('protected-endpoint/');\r\n    console.log('보호된 데이터:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('데이터 불러오기 실패:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}