{"ast":null,"code":"// src/api.js\n\nimport axios from 'axios';\nconst getCSRFToken = () => {\n  const cookies = document.cookie.split(';');\n  for (let cookie of cookies) {\n    const [key, value] = cookie.trim().split('=');\n    if (key === 'csrftoken') return value;\n  }\n  return null;\n};\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api/',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 응답 인터셉터: 토큰 만료 시 재요청 처리\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (refreshToken) {\n      try {\n        const refreshResponse = await axios.post('http://localhost:8000/api/token/refresh/', {\n          refresh: refreshToken\n        });\n        localStorage.setItem('access_token', refreshResponse.data.access);\n        error.config.headers['Authorization'] = `Bearer ${refreshResponse.data.access}`;\n        return axios(error.config);\n      } catch (refreshError) {\n        console.error('토큰 갱신 실패:', refreshError);\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        alert('세션이 만료되었습니다. 다시 로그인하세요.');\n        window.location.href = '/login';\n      }\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;\n\n// 회원가입 요청\nexport const handleSignup = async (username, password, name) => {\n  try {\n    const response = await api.post('accounts/register/', {\n      username,\n      password,\n      name\n    });\n    console.log('회원가입 성공:', response.data);\n    return response;\n  } catch (error) {\n    console.error('회원가입 실패:', error.response.data);\n    throw error;\n  }\n};\n\n// 로그인 요청 (토큰 발급)\nexport const handleLogin = async (username, password) => {\n  try {\n    const response = await api.post('accounts/login/', {\n      username,\n      password\n    });\n    const {\n      access,\n      refresh,\n      name\n    } = response.data;\n\n    // 토큰 저장 (로컬스토리지)\n    localStorage.setItem('access_token', access);\n    localStorage.setItem('refresh_token', refresh);\n    localStorage.setItem('user_name', name);\n    console.log('로그인 성공:', response.data);\n    return response;\n  } catch (error) {\n    console.error('로그인 실패:', error.response.data);\n    throw error;\n  }\n};\nexport const fetchProtectedData = async () => {\n  const token = localStorage.getItem('access_token');\n  try {\n    const response = await api.get('protected-endpoint/', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('보호된 데이터:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('데이터 불러오기 실패:', error.response.data);\n  }\n};","map":{"version":3,"names":["axios","getCSRFToken","cookies","document","cookie","split","key","value","trim","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","_error$response","status","refreshToken","refreshResponse","post","refresh","setItem","data","access","refreshError","console","removeItem","alert","window","location","href","handleSignup","username","password","name","log","handleLogin","fetchProtectedData","get","Authorization"],"sources":["C:/Users/User/Videos/react/my-app/frontend/src/api.js"],"sourcesContent":["// src/api.js\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nconst getCSRFToken = () => {\r\n  const cookies = document.cookie.split(';');\r\n  for (let cookie of cookies) {\r\n      const [key, value] = cookie.trim().split('=');\r\n      if (key === 'csrftoken') return value;\r\n  }\r\n  return null;\r\n};\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api/',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, \r\n});\r\n\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('access_token');\r\n  if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n}, (error) => Promise.reject(error));\r\n\r\n// 응답 인터셉터: 토큰 만료 시 재요청 처리\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n      if (error.response?.status === 401) {\r\n          const refreshToken = localStorage.getItem('refresh_token');\r\n          if (refreshToken) {\r\n              try {\r\n                  const refreshResponse = await axios.post('http://localhost:8000/api/token/refresh/', {\r\n                      refresh: refreshToken,\r\n                  });\r\n                  localStorage.setItem('access_token', refreshResponse.data.access);\r\n                  error.config.headers['Authorization'] = `Bearer ${refreshResponse.data.access}`;\r\n                  return axios(error.config);\r\n              } catch (refreshError) {\r\n                  console.error('토큰 갱신 실패:', refreshError);\r\n                  localStorage.removeItem('access_token');\r\n                  localStorage.removeItem('refresh_token');\r\n                  alert('세션이 만료되었습니다. 다시 로그인하세요.');\r\n                  window.location.href = '/login';\r\n              }\r\n          }\r\n      }\r\n      return Promise.reject(error);\r\n  }\r\n);\r\nexport default api;\r\n\r\n// 회원가입 요청\r\nexport const handleSignup = async (username, password,name) => {\r\n  try {\r\n    const response = await api.post('accounts/register/', { username, password,name });\r\n    console.log('회원가입 성공:', response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('회원가입 실패:', error.response.data);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 로그인 요청 (토큰 발급)\r\nexport const handleLogin = async (username, password) => {\r\n  try {\r\n    const response = await api.post('accounts/login/', { username, password });\r\n    const { access, refresh,name } = response.data;\r\n\r\n    // 토큰 저장 (로컬스토리지)\r\n    localStorage.setItem('access_token', access);\r\n    localStorage.setItem('refresh_token', refresh);\r\n    localStorage.setItem('user_name', name);\r\n\r\n    console.log('로그인 성공:', response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('로그인 실패:', error.response.data);\r\n    throw error; \r\n  }\r\n};\r\n\r\nexport const fetchProtectedData = async () => {\r\n  const token = localStorage.getItem('access_token');\r\n\r\n  try {\r\n    const response = await api.get('protected-endpoint/', {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    console.log('보호된 데이터:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('데이터 불러오기 실패:', error.response.data);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}