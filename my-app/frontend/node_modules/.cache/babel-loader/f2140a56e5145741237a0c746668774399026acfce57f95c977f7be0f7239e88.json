{"ast":null,"code":"// src/api.js\n\nimport axios from 'axios';\nconst getCSRFToken = () => {\n  const cookies = document.cookie.split(';');\n  for (let cookie of cookies) {\n    const [key, value] = cookie.trim().split('=');\n    if (key === 'csrftoken') return value;\n  }\n  return null;\n};\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api/',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\nconst refreshToken = async () => {\n  try {\n    const response = await api.post('token/refresh/', {\n      refresh: localStorage.getItem('refresh_token')\n    });\n    localStorage.setItem('access_token', response.data.access);\n  } catch (error) {\n    console.error('토큰 갱신 실패:', error);\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  }\n};\napi.interceptors.request.use(response => response, async error => {\n  if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\n    error.config.__isRetryRequest = true;\n    await refreshToken();\n    error.config.headers['Authorization'] = `Bearer ${localStorage.getItem('access_token')}`;\n    return api(error.config);\n  }\n  return Promise.reject(error);\n});\nexport default api;\n\n// 회원가입 요청\nexport const handleSignup = async (username, password, name) => {\n  try {\n    const response = await api.post('accounts/register/', {\n      username,\n      password,\n      name\n    });\n    console.log('회원가입 성공:', response.data);\n    return response;\n  } catch (error) {\n    console.error('회원가입 실패:', error.response.data);\n    throw error;\n  }\n};\n\n// 로그인 요청 (토큰 발급)\nexport const handleLogin = async (username, password) => {\n  try {\n    const response = await api.post('accounts/login/', {\n      username,\n      password\n    });\n    const {\n      access,\n      refresh,\n      name\n    } = response.data;\n\n    // 토큰 저장 (로컬스토리지)\n    localStorage.setItem('access_token', access);\n    localStorage.setItem('refresh_token', refresh);\n    localStorage.setItem('user_name', name);\n    console.log('로그인 성공:', response.data);\n    return response;\n  } catch (error) {\n    console.error('로그인 실패:', error.response.data);\n    throw error;\n  }\n};\nexport const fetchProtectedData = async () => {\n  const token = localStorage.getItem('access_token');\n  try {\n    const response = await api.get('protected-endpoint/', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('보호된 데이터:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('데이터 불러오기 실패:', error.response.data);\n  }\n};","map":{"version":3,"names":["axios","getCSRFToken","cookies","document","cookie","split","key","value","trim","api","create","baseURL","headers","withCredentials","refreshToken","response","post","refresh","localStorage","getItem","setItem","data","access","error","console","removeItem","interceptors","request","use","status","config","__isRetryRequest","Promise","reject","handleSignup","username","password","name","log","handleLogin","fetchProtectedData","token","get","Authorization"],"sources":["C:/Users/User/Videos/react/my-app/frontend/src/api.js"],"sourcesContent":["// src/api.js\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nconst getCSRFToken = () => {\r\n  const cookies = document.cookie.split(';');\r\n  for (let cookie of cookies) {\r\n      const [key, value] = cookie.trim().split('=');\r\n      if (key === 'csrftoken') return value;\r\n  }\r\n  return null;\r\n};\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api/',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, \r\n});\r\n\r\nconst refreshToken = async () => {\r\n  try {\r\n      const response = await api.post('token/refresh/', {\r\n          refresh: localStorage.getItem('refresh_token'),\r\n      });\r\n      localStorage.setItem('access_token', response.data.access);\r\n  } catch (error) {\r\n      console.error('토큰 갱신 실패:', error);\r\n      localStorage.removeItem('access_token');\r\n      localStorage.removeItem('refresh_token');\r\n  }\r\n};\r\n\r\napi.interceptors.request.use(\r\n  (response) => response,\r\n    async (error) => {\r\n        if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\r\n            error.config.__isRetryRequest = true;\r\n            await refreshToken();\r\n            error.config.headers['Authorization'] = `Bearer ${localStorage.getItem('access_token')}`;\r\n            return api(error.config);\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\nexport default api;\r\n\r\n// 회원가입 요청\r\nexport const handleSignup = async (username, password,name) => {\r\n  try {\r\n    const response = await api.post('accounts/register/', { username, password,name });\r\n    console.log('회원가입 성공:', response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('회원가입 실패:', error.response.data);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 로그인 요청 (토큰 발급)\r\nexport const handleLogin = async (username, password) => {\r\n  try {\r\n    const response = await api.post('accounts/login/', { username, password });\r\n    const { access, refresh,name } = response.data;\r\n\r\n    // 토큰 저장 (로컬스토리지)\r\n    localStorage.setItem('access_token', access);\r\n    localStorage.setItem('refresh_token', refresh);\r\n    localStorage.setItem('user_name', name);\r\n\r\n    console.log('로그인 성공:', response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('로그인 실패:', error.response.data);\r\n    throw error; \r\n  }\r\n};\r\n\r\nexport const fetchProtectedData = async () => {\r\n  const token = localStorage.getItem('access_token');\r\n\r\n  try {\r\n    const response = await api.get('protected-endpoint/', {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    console.log('보호된 데이터:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('데이터 불러오기 실패:', error.response.data);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}